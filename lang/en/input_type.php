<?php

return [
    'account_rule.description' => 'Defines criteria that accounts must meet to be added as Fuel Tank User Accounts. These rules are validated during the creation of Tank User Accounts, ensuring only eligible accounts are added based on the specified criteria. [Learn more](https://docs.enjin.io/docs/fuel-tank-pallet#account-rules).',
    'account_rule.field.whitelistedCallers' => 'Defines a list of accounts (as an array of strings) that are allowed to be added as Fuel Tank User Accounts. Only accounts included in this whitelist can be added.',
    'account_rule.field.requireToken' => 'Specifies that only accounts holding a specific multiToken are eligible to be added as Fuel Tank User Accounts.',
    'dispatch_rule.description' => 'Specifies rule sets that are validated when dispatching a transaction subsidized by the Fuel Tank. Each rule set can contain multiple individual rules that control access and permissions, ensuring the dispatch call adheres to the defined criteria.\n**Note:**: A fuel tank must have at least one rule set that includes at least one rule for it to be operational.\n[Learn more](https://docs.enjin.io/docs/fuel-tank-pallet#dispatch-rules).',
    'dispatch_rule.field.maxFuelBurnPerTransaction' => 'Limits the maximum amount of fuel that can be consumed in a single transaction. Dispatches exceeding this limit will fail',
    'dispatch_rule.field.requireToken' => 'Specifies that only accounts holding a specific multiToken are eligible to dispatch transactions using this rule set.',
    'dispatch_rule.field.tankFuelBudget' => 'Sets the total fuel allocated to the rule set. Once the tank\'s fuel budget is depleted, all dispatches using this rule set will fail.',
    'dispatch_rule.field.userFuelBudget' => 'Defines the total amount of fuel allocated to a specific tank user account. Dispatches from the user will fail once their fuel budget is exhausted.',
    'dispatch_rule.field.whitelistedCallers' => 'Defines a list of accounts (as an array of strings) that are allowed to dispatch transactions. Only accounts included in this whitelist can dispatch using this rule set.',
    'dispatch_rule.field.whitelistedCollections' => 'Requires the caller to hold any token from the specified collection. Only accounts owning a token from the collection can dispatch using this rule set.',
    'fuel_budget.description' => 'Specifies the total amount of fuel allocated. Once the allocated fuel is exhausted, dispatches associated with the budget will fail.',
    'fuel_budget.field.amount' => 'The total fuel allocated for the specified budget.',
    'fuel_budget.field.resetPeriod' => 'The recurring period, measured in blocks, after which the allocated fuel automatically resets to its full amount. To effectively disable resets, set this value to the maximum (4,294,967,295).',
    'require_token.description' => 'The rule for requiring a specific token.',
    'require_token.field.collectionId' => 'The collection chain ID.',
    'require_token.field.tokenId' => 'The token chain ID.',
    'fuel_tank_mutation.description' => 'Specifies the fields of the fuel tank to be modified. These include options for updating the [User Account Management](https://docs.enjin.io/docs/using-fuel-tanks#user-account-management), [Coverage Policy](https://docs.enjin.io/docs/using-fuel-tanks#coverage-policy), and [Account Rules](https://docs.enjin.io/docs/using-fuel-tanks#account-rules).',
    'dispatch.description' => 'The dispatch call.',
    'dispatch.field.query' => "The GraphQL query. It's required to query the 'id' and 'encodedData' from the result.",
    'dispatch.field.variables' => 'The GraphQL query variables.',
    'permitted_extrinsics.description' => 'Specifies a list of allowed extrinsic functions that can be executed using this rule set. Only these functions are permitted for dispatch.',
    'require_signature.description' => 'Requires each call to include a signature from the specified account. The account provided in this argument must sign the call for it to be accepted by the fuel tank. This rule is ideal for scenarios where the `requireSignature` is set to the daemon account, and dispatches are broadcasted from [managed wallets](https://docs.enjin.io/docs/using-managed-wallets). It enables a fuel tank to be restricted to managed wallets without explicitly storing each wallet address, saving storage fees and allowing dynamic whitelisting of dispatch accounts. [Learn more](https://docs.enjin.io/docs/fuel-tank-pallet#require-signature).',
    'require_signature.field.signature' => 'The wallet which we will require to sign the transaction.',
    'dispatch_settings.description' => 'The dispatch settings.',
    'dispatch_settings.field.paysRemainingFee' => 'The flag to pay the remaining fee.',
    'dispatch_settings.field.signature' => 'The expirable signature to use for this dispatch.',
    'expirable_signature.description' => 'The expirable signature.',
    'expirable_signature.field.signature' => 'The signature.',
    'expirable_signature.field.expiryBlock' => 'The expiry block.',
];
